# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from KME import util
from KME.models.base_model_ import Model


class Status(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, source_kme_id: str = None, target_kme_id: str = None, master_sae_id: str = None,
                 slave_sae_id: str = None, key_size: int = None, stored_key_count: int = None,
                 max_key_count: int = None, max_key_per_request: int = None, max_key_size: int = None,
                 min_key_size: int = None, max_sae_id_count: int = None, status_extension: object = None):
        """Status - a model defined in Swagger

        :param source_kme_id: The source_kme_id of this Status.  # noqa: E501
        :type source_kme_id: str
        :param target_kme_id: The target_kme_id of this Status.  # noqa: E501
        :type target_kme_id: str
        :param master_sae_id: The master_sae_id of this Status.  # noqa: E501
        :type master_sae_id: str
        :param slave_sae_id: The slave_sae_id of this Status.  # noqa: E501
        :type slave_sae_id: str
        :param key_size: The key_size of this Status.  # noqa: E501
        :type key_size: int
        :param stored_key_count: The stored_key_count of this Status.  # noqa: E501
        :type stored_key_count: int
        :param max_key_count: The max_key_count of this Status.  # noqa: E501
        :type max_key_count: int
        :param max_key_per_request: The max_key_per_request of this Status.  # noqa: E501
        :type max_key_per_request: int
        :param max_key_size: The max_key_size of this Status.  # noqa: E501
        :type max_key_size: int
        :param min_key_size: The min_key_size of this Status.  # noqa: E501
        :type min_key_size: int
        :param max_sae_id_count: The max_sae_id_count of this Status.  # noqa: E501
        :type max_sae_id_count: int
        :param status_extension: The status_extension of this Status.  # noqa: E501
        :type status_extension: object
        """
        self.swagger_types = {
            'source_kme_id': str,
            'target_kme_id': str,
            'master_sae_id': str,
            'slave_sae_id': str,
            'key_size': int,
            'stored_key_count': int,
            'max_key_count': int,
            'max_key_per_request': int,
            'max_key_size': int,
            'min_key_size': int,
            'max_sae_id_count': int,
            'status_extension': object
        }

        self.attribute_map = {
            'source_kme_id': 'source_KME_ID',
            'target_kme_id': 'target_KME_ID',
            'master_sae_id': 'master_SAE_ID',
            'slave_sae_id': 'slave_SAE_ID',
            'key_size': 'key_size',
            'stored_key_count': 'stored_key_count',
            'max_key_count': 'max_key_count',
            'max_key_per_request': 'max_key_per_request',
            'max_key_size': 'max_key_size',
            'min_key_size': 'min_key_size',
            'max_sae_id_count': 'max_SAE_ID_count',
            'status_extension': 'status_extension'
        }
        self._source_kme_id = source_kme_id
        self._target_kme_id = target_kme_id
        self._master_sae_id = master_sae_id
        self._slave_sae_id = slave_sae_id
        self._key_size = key_size
        self._stored_key_count = stored_key_count
        self._max_key_count = max_key_count
        self._max_key_per_request = max_key_per_request
        self._max_key_size = max_key_size
        self._min_key_size = min_key_size
        self._max_sae_id_count = max_sae_id_count
        self._status_extension = status_extension

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_kme_id(self) -> str:
        """Gets the source_kme_id of this Status.

        KME ID of the KME  # noqa: E501

        :return: The source_kme_id of this Status.
        :rtype: str
        """
        return self._source_kme_id

    @source_kme_id.setter
    def source_kme_id(self, source_kme_id: str):
        """Sets the source_kme_id of this Status.

        KME ID of the KME  # noqa: E501

        :param source_kme_id: The source_kme_id of this Status.
        :type source_kme_id: str
        """
        if source_kme_id is None:
            raise ValueError("Invalid value for `source_kme_id`, must not be `None`")  # noqa: E501

        self._source_kme_id = source_kme_id

    @property
    def target_kme_id(self) -> str:
        """Gets the target_kme_id of this Status.

        KME ID of the target KME  # noqa: E501

        :return: The target_kme_id of this Status.
        :rtype: str
        """
        return self._target_kme_id

    @target_kme_id.setter
    def target_kme_id(self, target_kme_id: str):
        """Sets the target_kme_id of this Status.

        KME ID of the target KME  # noqa: E501

        :param target_kme_id: The target_kme_id of this Status.
        :type target_kme_id: str
        """
        if target_kme_id is None:
            raise ValueError("Invalid value for `target_kme_id`, must not be `None`")  # noqa: E501

        self._target_kme_id = target_kme_id

    @property
    def master_sae_id(self) -> str:
        """Gets the master_sae_id of this Status.

        SAE ID of the calling master SAE  # noqa: E501

        :return: The master_sae_id of this Status.
        :rtype: str
        """
        return self._master_sae_id

    @master_sae_id.setter
    def master_sae_id(self, master_sae_id: str):
        """Sets the master_sae_id of this Status.

        SAE ID of the calling master SAE  # noqa: E501

        :param master_sae_id: The master_sae_id of this Status.
        :type master_sae_id: str
        """
        if master_sae_id is None:
            raise ValueError("Invalid value for `master_sae_id`, must not be `None`")  # noqa: E501

        self._master_sae_id = master_sae_id

    @property
    def slave_sae_id(self) -> str:
        """Gets the slave_sae_id of this Status.

        SAE ID of the specified slave SAE  # noqa: E501

        :return: The slave_sae_id of this Status.
        :rtype: str
        """
        return self._slave_sae_id

    @slave_sae_id.setter
    def slave_sae_id(self, slave_sae_id: str):
        """Sets the slave_sae_id of this Status.

        SAE ID of the specified slave SAE  # noqa: E501

        :param slave_sae_id: The slave_sae_id of this Status.
        :type slave_sae_id: str
        """
        if slave_sae_id is None:
            raise ValueError("Invalid value for `slave_sae_id`, must not be `None`")  # noqa: E501

        self._slave_sae_id = slave_sae_id

    @property
    def key_size(self) -> int:
        """Gets the key_size of this Status.

        Default size of key the KME can deliver to the SAE (in bit)  # noqa: E501

        :return: The key_size of this Status.
        :rtype: int
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size: int):
        """Sets the key_size of this Status.

        Default size of key the KME can deliver to the SAE (in bit)  # noqa: E501

        :param key_size: The key_size of this Status.
        :type key_size: int
        """
        if key_size is None:
            raise ValueError("Invalid value for `key_size`, must not be `None`")  # noqa: E501

        self._key_size = key_size

    @property
    def stored_key_count(self) -> int:
        """Gets the stored_key_count of this Status.

        Number of stored keys KME can deliver to the SAE  # noqa: E501

        :return: The stored_key_count of this Status.
        :rtype: int
        """
        return self._stored_key_count

    @stored_key_count.setter
    def stored_key_count(self, stored_key_count: int):
        """Sets the stored_key_count of this Status.

        Number of stored keys KME can deliver to the SAE  # noqa: E501

        :param stored_key_count: The stored_key_count of this Status.
        :type stored_key_count: int
        """
        if stored_key_count is None:
            raise ValueError("Invalid value for `stored_key_count`, must not be `None`")  # noqa: E501

        self._stored_key_count = stored_key_count

    @property
    def max_key_count(self) -> int:
        """Gets the max_key_count of this Status.

        Maximum number of stored_key_count  # noqa: E501

        :return: The max_key_count of this Status.
        :rtype: int
        """
        return self._max_key_count

    @max_key_count.setter
    def max_key_count(self, max_key_count: int):
        """Sets the max_key_count of this Status.

        Maximum number of stored_key_count  # noqa: E501

        :param max_key_count: The max_key_count of this Status.
        :type max_key_count: int
        """
        if max_key_count is None:
            raise ValueError("Invalid value for `max_key_count`, must not be `None`")  # noqa: E501

        self._max_key_count = max_key_count

    @property
    def max_key_per_request(self) -> int:
        """Gets the max_key_per_request of this Status.

        Maximum number of keys per request  # noqa: E501

        :return: The max_key_per_request of this Status.
        :rtype: int
        """
        return self._max_key_per_request

    @max_key_per_request.setter
    def max_key_per_request(self, max_key_per_request: int):
        """Sets the max_key_per_request of this Status.

        Maximum number of keys per request  # noqa: E501

        :param max_key_per_request: The max_key_per_request of this Status.
        :type max_key_per_request: int
        """
        if max_key_per_request is None:
            raise ValueError("Invalid value for `max_key_per_request`, must not be `None`")  # noqa: E501

        self._max_key_per_request = max_key_per_request

    @property
    def max_key_size(self) -> int:
        """Gets the max_key_size of this Status.

        Maximum size of key the KME can deliver to the SAE (in bit)  # noqa: E501

        :return: The max_key_size of this Status.
        :rtype: int
        """
        return self._max_key_size

    @max_key_size.setter
    def max_key_size(self, max_key_size: int):
        """Sets the max_key_size of this Status.

        Maximum size of key the KME can deliver to the SAE (in bit)  # noqa: E501

        :param max_key_size: The max_key_size of this Status.
        :type max_key_size: int
        """
        if max_key_size is None:
            raise ValueError("Invalid value for `max_key_size`, must not be `None`")  # noqa: E501

        self._max_key_size = max_key_size

    @property
    def min_key_size(self) -> int:
        """Gets the min_key_size of this Status.

        Minimum size of key the KME can deliver to the SAE (in bit)  # noqa: E501

        :return: The min_key_size of this Status.
        :rtype: int
        """
        return self._min_key_size

    @min_key_size.setter
    def min_key_size(self, min_key_size: int):
        """Sets the min_key_size of this Status.

        Minimum size of key the KME can deliver to the SAE (in bit)  # noqa: E501

        :param min_key_size: The min_key_size of this Status.
        :type min_key_size: int
        """
        if min_key_size is None:
            raise ValueError("Invalid value for `min_key_size`, must not be `None`")  # noqa: E501

        self._min_key_size = min_key_size

    @property
    def max_sae_id_count(self) -> int:
        """Gets the max_sae_id_count of this Status.

        Maximum number of additional_slave_SAE_IDs the KME allows. '0' when the KME does not support key multicast  # noqa: E501

        :return: The max_sae_id_count of this Status.
        :rtype: int
        """
        return self._max_sae_id_count

    @max_sae_id_count.setter
    def max_sae_id_count(self, max_sae_id_count: int):
        """Sets the max_sae_id_count of this Status.

        Maximum number of additional_slave_SAE_IDs the KME allows. '0' when the KME does not support key multicast  # noqa: E501

        :param max_sae_id_count: The max_sae_id_count of this Status.
        :type max_sae_id_count: int
        """
        if max_sae_id_count is None:
            raise ValueError("Invalid value for `max_sae_id_count`, must not be `None`")  # noqa: E501

        self._max_sae_id_count = max_sae_id_count

    @property
    def status_extension(self) -> object:
        """Gets the status_extension of this Status.

        (Option) for future use  # noqa: E501

        :return: The status_extension of this Status.
        :rtype: object
        """
        return self._status_extension

    @status_extension.setter
    def status_extension(self, status_extension: object):
        """Sets the status_extension of this Status.

        (Option) for future use  # noqa: E501

        :param status_extension: The status_extension of this Status.
        :type status_extension: object
        """

        self._status_extension = status_extension
