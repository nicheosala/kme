# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class Key(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, key_id: str = None, key_id_extension: object = None, key: bytearray = None,
                 key_extension: object = None):  # noqa: E501
        """Key - a model defined in Swagger

        :param key_id: The key_id of this Key.  # noqa: E501
        :type key_id: str
        :param key_id_extension: The key_id_extension of this Key.  # noqa: E501
        :type key_id_extension: object
        :param key: The key of this Key.  # noqa: E501
        :type key: bytearray
        :param key_extension: The key_extension of this Key.  # noqa: E501
        :type key_extension: object
        """
        self.swagger_types = {
            'key_id': str,
            'key_id_extension': object,
            'key': bytearray,
            'key_extension': object
        }

        self.attribute_map = {
            'key_id': 'key_ID',
            'key_id_extension': 'key_ID_extension',
            'key': 'key',
            'key_extension': 'key_extension'
        }
        self._key_id = key_id
        self._key_id_extension = key_id_extension
        self._key = key
        self._key_extension = key_extension

    @classmethod
    def from_dict(cls, dikt) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Key of this Key.  # noqa: E501
        :rtype: Key
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_id(self) -> str:
        """Gets the key_id of this Key.

        ID of the key  # noqa: E501

        :return: The key_id of this Key.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id: str):
        """Sets the key_id of this Key.

        ID of the key  # noqa: E501

        :param key_id: The key_id of this Key.
        :type key_id: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")  # noqa: E501

        self._key_id = key_id

    @property
    def key_id_extension(self) -> object:
        """Gets the key_id_extension of this Key.

        (Option) for future use  # noqa: E501

        :return: The key_id_extension of this Key.
        :rtype: object
        """
        return self._key_id_extension

    @key_id_extension.setter
    def key_id_extension(self, key_id_extension: object):
        """Sets the key_id_extension of this Key.

        (Option) for future use  # noqa: E501

        :param key_id_extension: The key_id_extension of this Key.
        :type key_id_extension: object
        """

        self._key_id_extension = key_id_extension

    @property
    def key(self) -> bytearray:
        """Gets the key of this Key.

        Key data  # noqa: E501

        :return: The key of this Key.
        :rtype: bytearray
        """
        return self._key

    @key.setter
    def key(self, key: bytearray):
        """Sets the key of this Key.

        Key data  # noqa: E501

        :param key: The key of this Key.
        :type key: bytearray
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def key_extension(self) -> object:
        """Gets the key_extension of this Key.

        (Option) for future use  # noqa: E501

        :return: The key_extension of this Key.
        :rtype: object
        """
        return self._key_extension

    @key_extension.setter
    def key_extension(self, key_extension: object):
        """Sets the key_extension of this Key.

        (Option) for future use  # noqa: E501

        :param key_extension: The key_extension of this Key.
        :type key_extension: object
        """

        self._key_extension = key_extension
