# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server.models.key import Key  # noqa: F401,E501
from server import util


class KeyContainer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, keys: List[Key] = None, key_container_extension: object = None):  # noqa: E501
        """KeyContainer - a model defined in Swagger

        :param keys: The keys of this KeyContainer.  # noqa: E501
        :type keys: List[Key]
        :param key_container_extension: The key_container_extension of this KeyContainer.  # noqa: E501
        :type key_container_extension: object
        """
        self.swagger_types = {
            'keys': List[Key],
            'key_container_extension': object
        }

        self.attribute_map = {
            'keys': 'keys',
            'key_container_extension': 'key_container_extension'
        }
        self._keys = keys
        self._key_container_extension = key_container_extension

    @classmethod
    def from_dict(cls, dikt) -> 'KeyContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The KeyContainer of this KeyContainer.  # noqa: E501
        :rtype: KeyContainer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keys(self) -> List[Key]:
        """Gets the keys of this KeyContainer.


        :return: The keys of this KeyContainer.
        :rtype: List[Key]
        """
        return self._keys

    @keys.setter
    def keys(self, keys: List[Key]):
        """Sets the keys of this KeyContainer.


        :param keys: The keys of this KeyContainer.
        :type keys: List[Key]
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")  # noqa: E501

        self._keys = keys

    @property
    def key_container_extension(self) -> object:
        """Gets the key_container_extension of this KeyContainer.

        (Option) for future use  # noqa: E501

        :return: The key_container_extension of this KeyContainer.
        :rtype: object
        """
        return self._key_container_extension

    @key_container_extension.setter
    def key_container_extension(self, key_container_extension: object):
        """Sets the key_container_extension of this KeyContainer.

        (Option) for future use  # noqa: E501

        :param key_container_extension: The key_container_extension of this KeyContainer.
        :type key_container_extension: object
        """

        self._key_container_extension = key_container_extension
